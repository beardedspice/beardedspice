<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<!--
//
//  Vk.plist
//  BeardedSpice
//
//  Created by Anton Mihailov on 17/06/14.
//  Copyright (c) 2014 Anton Mihailov. All rights reserved.
//
-->
<dict>
    <!-- metadata -->
    <key>version</key>
    <integer>1</integer>
    <key>displayName</key>
    <string>VK</string>

    <key>accepts</key>
    <dict>
        <key>predicate</key>
        <string>SELF LIKE[c] '*vk.com*'</string>
        <key>tabValue</key>
        <string>url</string> <!-- current 'url' or 'title' -->
    </dict>

    <!-- Relevant javascripts go here.
    - Normal formatting is supported (can copy/paste with newlines and indentations)
    - &amp; is used to escape '&' so the file is readable.
    -->
    <key>isPlaying</key>
    <string>!!document.querySelector('#ac_play.playing, #gp_play.playing');</string>

    <key>toggle</key>
    <string>(function(w){
        var el = document.querySelector('#ac_play, #gp_play');
        if (el) { el.click(); return; }
        w.Pads.show('mus', null);
        var pollPlayerInterval = setInterval(
        (function(w){
            return function(){
                var el = document.querySelector('#pd_play');
                if (!el) { return; }
                clearInterval(pollPlayerInterval);
                el.click();
                w.Pads.hide('mus', null);
            }
        })(w), 10);
    })(window)</string>

    <key>previous</key>
    <string>(function(w){
        var el = document.querySelector('#ac_prev');
        if (el) { el.click(); return; }
        w.Pads.show('mus', null);
        var pollPlayerInterval = setInterval(
        (function(w){
            return function(){
                var el = document.querySelector('#pd_prev');
                if (!el) { return; }
                clearInterval(pollPlayerInterval);
                el.click();
                w.Pads.hide('mus', null);
            }
        })(w), 10);
    })(window)</string>

    <key>next</key>
    <string>(function(w){
        var el = document.querySelector('#ac_next');
        if (el) { el.click(); return; }
        w.Pads.show('mus', null);
        var pollPlayerInterval = setInterval(
        (function(w){
            return function(){
                var el = document.querySelector('#pd_next');
                if (!el) { return; }
                clearInterval(pollPlayerInterval);
                el.click();
                w.Pads.hide('mus', null);
            }
        })(w), 10);
    })(window)</string>

    <key>pause</key>
    <string>(function(w){
        var el = document.querySelector('#ac_play.playing, #gp_play.playing');
        if (el) { el.click(); return; }
        w.Pads.show('mus', null);
        var pollPlayerInterval = setInterval(
        (function(w){
            return function(){
                var el = document.querySelector('#pd_play.playing');
                if (!el) { return; }
                clearInterval(pollPlayerInterval);
                el.click();
                w.Pads.hide('mus', null);
            }
        })(w), 10);
        setTimeout(function(){clearInterval(pollPlayerInterval);}, 1000);
    })(window)</string>

    <key>favorite</key>
    <string>(function(w){
        var el = document.querySelector('#ac_add');
        if (el) { el.click(); return; }
        w.Pads.show('mus', null);
        var pollPlayerInterval = setInterval(
        (function(w){
            return function(){
                var el = document.querySelector('#pd_add');
                if (!el) { return; }
                clearInterval(pollPlayerInterval);
                el.click();
                w.Pads.hide('mus', null);
            }
        })(w), 10);
    })(window)</string>

    <!-- Generate dictionary of namespaced key/values here. All manipulation should be supported in javascript.
    - Namespaced keys currently supported include: track, album, artist, favorited, image
    -->
    <key>trackInfo</key>
    <string>(function(w){
        var titleEl = document.querySelector('span#ac_title, #gp_title'),
            artistEl = document.querySelector('span#ac_performer, #gp_performer');
        if (! titleEl || ! artistEl) {
            w.Pads.show('mus', null);
            titleEl = document.querySelector('span#pd_title'),
            artistEl = document.querySelector('span#pd_performer');
            w.Pads.hide('mus', null);
        }
        if (!(titleEl &amp;&amp; artistEl)) { return {}; }
        return {
            'title': titleEl.firstChild.nodeValue,
            'artist': artistEl.firstChild.nodeValue
        };
    })(window)</string>
</dict>
</plist>
