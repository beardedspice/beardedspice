<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<!--
//
//  Rhapsody.plist
//  BeardedSpice
//
//  Created by Aaron Pollack on 11/17/15.
//  Copyright Â© 2015 BeardedSpice. All rights reserved.
//
-->
<dict>
    <!-- metadata -->
    <key>version</key>
    <integer>1</integer>
    <key>displayName</key>
    <string>Rhapsody</string>

    <key>accepts</key>
    <dict>
        <key>predicate</key>
        <string>SELF LIKE[c] '*app.rhapsody.com*'</string>
        <key>tabValue</key>
        <string>url</string> <!-- current 'url' or 'title' -->
    </dict>

    <!-- Relevant javascripts go here.
    - Normal formatting is supported (can copy/paste with newlines and indentations)
    - &amp; is used to escape '&' so the file is readable.
    -->
    <key>isPlaying</key>
    <string>(function(){return !!$('.player-play-button .icon-pause2').length;})()</string>

    <key>toggle</key>
    <string>(function(){
        if ($('.player-play-button .icon-pause2').length) {
             $('.player-play-button .icon-pause2').click();
        } else {
            $('.player-play-button .icon-play-button').click()
        }
    })()</string>

    <key>previous</key>
    <string>(function(){$('.player-rewind-button').click();})()</string>

    <key>next</key>
    <string>(function(){$('.player-advance-button').click();})()</string>

    <key>pause</key>
    <string>(function(){$('.player-play-button .icon-pause2').click();})()</string>

    <key>favorite</key>
    <string>(function(){$('.favorite-button').click()})()</string>

    <!-- Generate dictionary of namespaced key/values here. All manipulation should be supported in javascript.
    - Namespaced keys currently supported include: track, album, artist, favorited, image
    -->
    <key>trackInfo</key>
    <string>(function() {
        function titleize(slug) {
            var words = slug.split('-');
            return words.map(function(word) {
                return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();
            }).join(' ');
        }
        return {
            'track': $('.player-track a')[0].innerText,
            'artist': ($('.player-artist a')[0].innerHTML).split('- ').slice(1).join('- ').trim(),
            'album': titleize($('.player-wrapper a').attr('href').split('album/')[1]),
            'image': $('.player-album-thumbnail img')[0].src};
        })()</string>
</dict>
</plist>
